Немного о том, что здесь лежит:

* Property

Цель библиотеки - сделать удобную и расширяемую библиотеку свойств. 
Основные применения - редактор свойств графа сцены и ввод/вывод. 

Кроме "традиционных" свойств (обеспечивающих операции get/set) реализованы:
1. Свойства-списки. Для создания составных свойств из более простых (фактически каждый объект представляется этим свойством).
2. Свойства-массивы. Для объединения массивов однотипных свойств. Для них также есть небольшая оптимизация - для POD-типов предусмотрен 
непосредственный доступ к массиву, что позволяет существенно сэкономить время на загрузку/сохранение.
3. Свойства-конструкторы. Используется, если наличие/отсутсвие некоторых свойств объекта зависит от других его свойств. Пример -
разные типы материалов могут иметь разные свойства в зависимости от этого самого типа.

Перечисленные типы свойств позволяют представлять в виде списка свойств не только простейшие объекты, но и более сложные - массивы (в том
числе и из составных данных), а также абстрактные классы (через конструкторы). 

Некоторая информация об исходных файлах доступна во внутреннем readme

* Scenegraph

Целью этой реализации графа сцены было предоставить не только "внешний" интерфейс на базе иерархии узлов (как это делают другие библиотеки), но
и предоставить "внутренний" интерфейс в виде сериализовнных в массив данных (для повышения производительности и удобства работы с данными на GPU).

Для предоставления внешнего интерфейса используются узлы графа (Node). Совокупность узлов представляет из себя классическое дерево с интерфейсом
добавления/удаления потомков и заданием ядра - данных, хранящихся в узле.
Для каждого типа ядра известен тип хранилища (Stash), реализующий интерфейс сериализации данных. Хранилища содержатся в графе сцены невидимым для
клиентского кода образом. 
Некоторые свойства объектов, содержащихся в графе сцены, задаются иерархически. Например, трасформации узлов задаются последовательным применением
трансформаций всех предков. Для сбора этой информации на этапе сериализации данных в массивы используется механизм атрибутов - каждому узлу графа
приписывается список значений атрибутов, который обновляется в процессе сериализации, основываясь на значении атрибутов родительского узла и данных,
содержащихся в узле.

Таким образом, граф сцены предоставляет с одной стороны удобное для написания "клиентского" кода представление в виде иерархии объектов, а с другой -
эффективное для высокопроизводительных вычислений представление на основе набора массивов.

Некоторая информация об исходных файлах доступна во внутреннем readme
