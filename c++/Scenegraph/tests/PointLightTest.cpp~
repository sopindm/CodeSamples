#include <gtest/gtest.h>
#include <Scenegraph/PointLight.hpp>

using namespace Eigen;
using namespace rtrt;
using namespace rtrt::scenegraph;
using namespace rtrt::scenegraph::lightStash;

class PointLightTest : public testing::Test
{
public:
  void SetUp();

  void checkVector( const Vector3f& vector, const Vector3f& expected );
  void checkVector( const Vector4f& vector, const Vector4f& expected );
};

void PointLightTest::checkVector( const Vector3f& vector, const Vector3f& expected )
{
  EXPECT_FLOAT_EQ( vector.x(), expected.x() );
  EXPECT_FLOAT_EQ( vector.y(), expected.y() );
  EXPECT_FLOAT_EQ( vector.z(), expected.z() );
}

void PointLightTest::checkVector( const Vector4f& vector, const Vector4f& expected )
{
  EXPECT_FLOAT_EQ( vector.x(), expected.x() );
  EXPECT_FLOAT_EQ( vector.y(), expected.y() );
  EXPECT_FLOAT_EQ( vector.z(), expected.z() );
  EXPECT_FLOAT_EQ( vector.w(), expected.w() );
}

void PointLightTest::SetUp()
{
}

TEST_F( PointLightTest, Accessing )
{
  PointLight light;

  light.setPosition( Vector4f( 1., 2., 3., 4. ));
  checkVector( light.position(), Vector4f( 1., 2., 3., 4. ));
  
  light.setAmbient( Color3f( 0.5, 0.6, 0.7 ));
  checkVector( light.ambient(), Color3f( 0.5, 0.6, 0.7 ));

  light.setDiffuse( Color3f( 0.1, 0.2, 0.3 ));
  checkVector( light.diffuse(), Color3f( 0.1, 0.2, 0.3 ));

  light.setSpecular( Color3f( 0.4, 0.7, 0.2 ));
  checkVector( light.ambient(), Color3f( 0.4, 0.7, 0.2 ));

  light.setConstantAttenuation( 5.3 );
  EXPECT_FLOAT_EQ( light.constantAttenuation(), 5.3 );

  light.setLinearAttenuation( 0.7 );
  EXPECT_FLOAT_EQ( light.linearAttenuation(), 0.7 );

  light.setQuadraticAttenuation( 3.3 );
  EXPECT_FLOAT_EQ( light.quadraticAttenuation(), 3.3 );
}
